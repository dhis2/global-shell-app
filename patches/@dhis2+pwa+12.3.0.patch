diff --git a/node_modules/@dhis2/pwa/build/cjs/index.js b/node_modules/@dhis2/pwa/build/cjs/index.js
index 571bd0e..1ca95ba 100644
--- a/node_modules/@dhis2/pwa/build/cjs/index.js
+++ b/node_modules/@dhis2/pwa/build/cjs/index.js
@@ -9,6 +9,12 @@ Object.defineProperty(exports, "OfflineInterface", {
     return _offlineInterface.OfflineInterface;
   }
 });
+Object.defineProperty(exports, "OfflineInterfaceProvider", {
+  enumerable: true,
+  get: function () {
+    return _OfflineInterfaceContext.OfflineInterfaceProvider;
+  }
+});
 Object.defineProperty(exports, "REGISTRATION_STATE_ACTIVE", {
   enumerable: true,
   get: function () {
@@ -69,6 +75,18 @@ Object.defineProperty(exports, "setUpServiceWorker", {
     return _setUpServiceWorker.setUpServiceWorker;
   }
 });
+Object.defineProperty(exports, "useOfflineInterface", {
+  enumerable: true,
+  get: function () {
+    return _OfflineInterfaceContext.useOfflineInterface;
+  }
+});
+Object.defineProperty(exports, "usePWAUpdateState", {
+  enumerable: true,
+  get: function () {
+    return _usePWAUpdateState.usePWAUpdateState;
+  }
+});
 var _setUpServiceWorker = require("./service-worker/set-up-service-worker.js");
 var _offlineInterface = require("./offline-interface/offline-interface.js");
 var _registration = require("./lib/registration.js");
diff --git a/node_modules/@dhis2/pwa/build/cjs/react/OfflineInterfaceContext.js b/node_modules/@dhis2/pwa/build/cjs/react/OfflineInterfaceContext.js
new file mode 100644
index 0000000..2d465d7
--- /dev/null
+++ b/node_modules/@dhis2/pwa/build/cjs/react/OfflineInterfaceContext.js
@@ -0,0 +1,37 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.useOfflineInterface = exports.OfflineInterfaceProvider = void 0;
+var _propTypes = _interopRequireDefault(require("prop-types"));
+var _react = _interopRequireWildcard(require("react"));
+var _offlineInterface = require("../offline-interface/offline-interface.js");
+function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
+function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
+function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+const OfflineInterfaceContext = /*#__PURE__*/(0, _react.createContext)(null);
+
+// nb: instantiating an offline interface here creates a side-effect where
+// it is bundled in the service worker, which causes an error when the `window`
+// API is referenced.
+// It seems like some react and prop types leaks into the SW as well, which is
+// interesting because other exports like from registration.js don't
+let theOfflineInterface = null;
+const OfflineInterfaceProvider = _ref => {
+  let {
+    children
+  } = _ref;
+  if (theOfflineInterface === null) {
+    theOfflineInterface = new _offlineInterface.OfflineInterface();
+  }
+  return /*#__PURE__*/_react.default.createElement(OfflineInterfaceContext.Provider, {
+    value: theOfflineInterface
+  }, children);
+};
+exports.OfflineInterfaceProvider = OfflineInterfaceProvider;
+OfflineInterfaceProvider.propTypes = {
+  children: _propTypes.default.node
+};
+const useOfflineInterface = () => (0, _react.useContext)(OfflineInterfaceContext);
+exports.useOfflineInterface = useOfflineInterface;
\ No newline at end of file
diff --git a/node_modules/@dhis2/pwa/build/cjs/react/usePWAUpdateState.js b/node_modules/@dhis2/pwa/build/cjs/react/usePWAUpdateState.js
new file mode 100644
index 0000000..7dea937
--- /dev/null
+++ b/node_modules/@dhis2/pwa/build/cjs/react/usePWAUpdateState.js
@@ -0,0 +1,56 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.usePWAUpdateState = void 0;
+var _react = require("react");
+var _OfflineInterfaceContext = require("./OfflineInterfaceContext.js");
+const usePWAUpdateState = () => {
+  const offlineInterface = (0, _OfflineInterfaceContext.useOfflineInterface)();
+  const [updateAvailable, setUpdateAvailable] = (0, _react.useState)(false);
+  const [clientsCount, setClientsCount] = (0, _react.useState)(null);
+  const onConfirmUpdate = () => {
+    offlineInterface.useNewSW();
+  };
+  const onCancelUpdate = () => {
+    setClientsCount(null);
+  };
+  const confirmReload = () => {
+    offlineInterface.getClientsInfo().then(_ref => {
+      let {
+        clientsCount
+      } = _ref;
+      if (clientsCount === 1) {
+        // Just one client; go ahead and reload
+        onConfirmUpdate();
+      } else {
+        // Multiple clients; warn about data loss before reloading
+        setClientsCount(clientsCount);
+      }
+    }).catch(reason => {
+      // Didn't get clients info
+      console.warn(reason);
+
+      // Go ahead with confirmation modal with `0` as clientsCount
+      setClientsCount(0);
+    });
+  };
+  (0, _react.useEffect)(() => {
+    offlineInterface.checkForNewSW({
+      onNewSW: () => {
+        setUpdateAvailable(true);
+      }
+    });
+  }, [offlineInterface]);
+  const confirmationRequired = clientsCount !== null;
+  return {
+    updateAvailable,
+    confirmReload,
+    confirmationRequired,
+    clientsCount,
+    onConfirmUpdate,
+    onCancelUpdate
+  };
+};
+exports.usePWAUpdateState = usePWAUpdateState;
diff --git a/node_modules/@dhis2/pwa/build/es/index.js b/node_modules/@dhis2/pwa/build/es/index.js
index 960e2b2..5bbcbff 100644
--- a/node_modules/@dhis2/pwa/build/es/index.js
+++ b/node_modules/@dhis2/pwa/build/es/index.js
@@ -2,3 +2,5 @@ export { setUpServiceWorker } from './service-worker/set-up-service-worker.js';
 export { OfflineInterface } from './offline-interface/offline-interface.js';
 export { checkForUpdates, checkForSWUpdateAndReload, getRegistrationState, REGISTRATION_STATE_UNREGISTERED, REGISTRATION_STATE_WAITING, REGISTRATION_STATE_ACTIVE, REGISTRATION_STATE_FIRST_ACTIVATION } from './lib/registration.js';
 export { getBaseUrlByAppName, setBaseUrlByAppName } from './lib/base-url-db.js';
+export { OfflineInterfaceProvider, useOfflineInterface } from './react/OfflineInterfaceContext.js';
+export { usePWAUpdateState } from './react/usePWAUpdateState.js'
diff --git a/node_modules/@dhis2/pwa/build/es/react/OfflineInterfaceContext.js b/node_modules/@dhis2/pwa/build/es/react/OfflineInterfaceContext.js
new file mode 100644
index 0000000..ed7d292
--- /dev/null
+++ b/node_modules/@dhis2/pwa/build/es/react/OfflineInterfaceContext.js
@@ -0,0 +1,26 @@
+import PropTypes from 'prop-types';
+import React, { createContext, useContext } from 'react';
+import { OfflineInterface } from '../offline-interface/offline-interface.js';
+const OfflineInterfaceContext = /*#__PURE__*/createContext(null);
+
+// nb: instantiating an offline interface here creates a side-effect where
+// it is bundled in the service worker, which causes an error when the `window`
+// API is referenced.
+// It seems like some react and prop types leaks into the SW as well, which is
+// interesting because other exports like from registration.js don't
+let theOfflineInterface = null;
+export const OfflineInterfaceProvider = _ref => {
+  let {
+    children
+  } = _ref;
+  if (theOfflineInterface === null) {
+    theOfflineInterface = new OfflineInterface();
+  }
+  return /*#__PURE__*/React.createElement(OfflineInterfaceContext.Provider, {
+    value: theOfflineInterface
+  }, children);
+};
+OfflineInterfaceProvider.propTypes = {
+  children: PropTypes.node
+};
+export const useOfflineInterface = () => useContext(OfflineInterfaceContext);
\ No newline at end of file
diff --git a/node_modules/@dhis2/pwa/build/es/react/usePWAUpdateState.js b/node_modules/@dhis2/pwa/build/es/react/usePWAUpdateState.js
new file mode 100644
index 0000000..4f11c97
--- /dev/null
+++ b/node_modules/@dhis2/pwa/build/es/react/usePWAUpdateState.js
@@ -0,0 +1,49 @@
+import { useEffect, useState } from 'react';
+import { useOfflineInterface } from './OfflineInterfaceContext.js';
+export const usePWAUpdateState = () => {
+  const offlineInterface = useOfflineInterface();
+  const [updateAvailable, setUpdateAvailable] = useState(false);
+  const [clientsCount, setClientsCount] = useState(null);
+  const onConfirmUpdate = () => {
+    offlineInterface.useNewSW();
+  };
+  const onCancelUpdate = () => {
+    setClientsCount(null);
+  };
+  const confirmReload = () => {
+    offlineInterface.getClientsInfo().then(_ref => {
+      let {
+        clientsCount
+      } = _ref;
+      if (clientsCount === 1) {
+        // Just one client; go ahead and reload
+        onConfirmUpdate();
+      } else {
+        // Multiple clients; warn about data loss before reloading
+        setClientsCount(clientsCount);
+      }
+    }).catch(reason => {
+      // Didn't get clients info
+      console.warn(reason);
+
+      // Go ahead with confirmation modal with `0` as clientsCount
+      setClientsCount(0);
+    });
+  };
+  useEffect(() => {
+    offlineInterface.checkForNewSW({
+      onNewSW: () => {
+        setUpdateAvailable(true);
+      }
+    });
+  }, [offlineInterface]);
+  const confirmationRequired = clientsCount !== null;
+  return {
+    updateAvailable,
+    confirmReload,
+    confirmationRequired,
+    clientsCount,
+    onConfirmUpdate,
+    onCancelUpdate
+  };
+};
\ No newline at end of file
